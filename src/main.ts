import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import * as cookieParser from 'cookie-parser';
import { DatabaseExceptionFilter } from './exceptions/database-exception.filter';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalFilters(new DatabaseExceptionFilter());

  const configService = app.get(ConfigService);

  // C·∫•u h√¨nh Swagger
  const swaggerConfig = new DocumentBuilder()
    .setTitle('API Documentation')
    .setDescription('NestJS API Swagger')
    .setVersion('1.0')
    .addBearerAuth()
    .build();

  const document = SwaggerModule.createDocument(app, swaggerConfig);
  SwaggerModule.setup('api-docs', app, document); // ƒê∆∞·ªùng d·∫´n: /api-docs

  // L·∫•y danh s√°ch c√°c domain t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, n·∫øu kh√¥ng th√¨ m·∫∑c ƒë·ªãnh l√† localhost
  const frontendUrls = configService.get<string>('FRONTEND_URLS').split(','); // T√°ch c√°c URL n·∫øu c√≥ nhi·ªÅu h∆°n 1 domain

  const port = configService.get<number>('APP_PORT', 8080);

  // Enable validation
  // app.useGlobalPipes(new ValidationPipe({
  //   whitelist: true,
  //   transform: true,
  //   forbidNonWhitelisted: false,
  // }));

  // Set global prefix
  app.setGlobalPrefix('api/v1');

  // C·∫•u h√¨nh CORS h·ªó tr·ª£ subdomain
  app.enableCors({
    origin: (origin, callback) => {
      if (!origin || origin === `http://localhost:${port}` || frontendUrls.includes(origin)) {
        // Cho ph√©p c√°c y√™u c·∫ßu kh√¥ng c√≥ origin (c√°c c√¥ng c·ª• test nh∆∞ Postman)
        return callback(null, true);
      }

      const isAllowed = frontendUrls.some((url) => {
        const regex = new RegExp(
          `^https?://([a-z0-9-]+\.)?${url.replace('http://', '').replace('https://', '')}$`,
        );
        return regex.test(origin);
      });

      if (isAllowed) {
        callback(null, true); // Y√™u c·∫ßu ƒë∆∞·ª£c ph√©p
      } else {
        callback(new Error('Not allowed by CORS')); // Y√™u c·∫ßu b·ªã ch·∫∑n
      }
    },
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
    allowedHeaders: 'Content-Type, Accept',
    credentials: true, // Cho ph√©p cookie
  });

  app.use(cookieParser());
  await app.listen(port);
  console.log(`\uD83D\uDE80 ·ª®ng d·ª•ng ƒëang ch·∫°y t·∫°i: http://localhost:${port}`);
  console.log(`üìö Swagger docs: http://localhost:${port}/api-docs`);
}

bootstrap();
